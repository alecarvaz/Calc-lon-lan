# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLonCalcDialog
                                 A QGIS plugin
 Conversion de coordenadas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-08-18
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Axel Cardona
        email                : axel.cardona@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latloncalc_dialog_base.ui'))


class LatLonCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLonCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        #Disparadores Latitud
        self.spbLatD.valueChanged.connect(self.latGMStoGD)
        self.spbLatM.valueChanged.connect(self.latGMStoGD)
        self.spbLatS.valueChanged.connect(self.latGMStoGD)
        self.cmbLatH.currentTextChanged.connect(self.latGMStoGD)
        
        #Disparador GD
        self.spbLatGD.editingFinished.connect(self.latGDtoGMS)
        
    def latGMStoGD(self):
        intDeg = self.spbLatD.value()
        intMin = self.spbLatM.value()
        decSeg = self.spbLatS.value()
        hem = self.cmbLatH.currentText()
        
        dGD = float(intDeg) + intMin/60 + decSeg/3600
        
        if hem == "S":
            dGD = dGD * -1
         
        self.spbLatGD.setValue(dGD)
        
    def latGDtoGMS(self):
        dGD = self.spbLatGD.value()
        intDeg = int(dGD)
        decMin = (dGD - intDeg) * 60
        intMin = int(decMin)
        decSeg = (decMin - intMin) *60
        
        self.spbLatD.setValue(abs(intDeg))
        self.spbLatM.setValue(abs(intMin))
        self.spbLatS.setValue(abs(decSeg))
        
        if dGD < 0:
            self.cmbLatH.setCurrentText("S")
        else:
            self.cmbLatH.setCurrentText("N")


        #Disparadores Longitudes
        self.spbLonD.valueChanged.connect(self.lonGMStoGD)
        self.spbLonM.valueChanged.connect(self.lonGMStoGD)
        self.spbLonS.valueChanged.connect(self.lonGMStoGD)
        self.cmbLonH.currentTextChanged.connect(self.lonGMStoGD)
        
        #Disparador LonGD
        self.spbLonGD.editingFinished.connect(self.lonGDtoGMS)

    def lonGMStoGD(self):
        intDeg = self.spbLonD.value()
        intMin = self.spbLonM.value()
        decSeg = self.spbLonS.value()
        hem = self.cmbLonH.currentText()
        
        dGD = float(intDeg) + intMin/60+ decSeg/3600
        
        if hem == "W":
            dGD = dGD * -1
        
        self.spbLonGD.setValue(dGD)    
        
    def lonGDtoGMS(self):
        dGD = self.spbLonGD.value()
        intDeg = int(dGD)
        decMin = (dGD - intDeg) * 60
        intMin = int(decMin)
        decSeg = (decMin - intMin) *60
        
        self.spbLonD.setValue(abs(intDeg))
        self.spbLonM.setValue(abs(intMin))
        self.spbLonS.setValue(abs(decSeg))
        
        if dGD < 0:
            self.cmbLonH.setCurrentText("W")
        else:
            self.cmbLonH.setCurrentText("E")    
        
        
        
        
        
        
        